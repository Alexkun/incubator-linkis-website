import{o as n,c as l,b as e,r as t,l as u,u as o}from"./vendor.1180558b.js";var i="/assets/engineconn-01.b4d20b76.png";const r={class:"markdown-body"},c=[e("h1",null,"EngineConn architecture design",-1),e("p",null,"EngineConn: Engine connector, a module that provides functions such as unified configuration management, context service, physical library, data source management, micro service management, and historical task query for other micro service modules.",-1),e("p",null,"EngineConn architecture diagram",-1),e("p",null,[e("img",{src:i,alt:"EngineConn"})],-1),e("h1",null,"Introduction to the second-level module:",-1),e("h2",null,"linkis-computation-engineconn interactive engine connector",-1),e("p",null,"The ability to provide interactive computing tasks.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core class"),e("th",null,"Core function")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnTask"),e("td",null,"Defines the interactive computing tasks submitted to EngineConn")]),e("tr",null,[e("td",null,"ComputationExecutor"),e("td",null,"Defined interactive Executor, with interactive capabilities such as status query and task kill.")]),e("tr",null,[e("td",null,"TaskExecutionService"),e("td",null,"Provides management functions for interactive computing tasks")])])],-1),e("h2",null,"linkis-engineconn-common engine connector common module",-1),e("p",null,"Define the most basic entity classes and interfaces in the engine connector. EngineConn is used to create a connection session Session for the underlying computing storage engine, which contains the session information between the engine and the specific cluster, and is the client that communicates with the specific engine.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core Service"),e("th",null,"Core function")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineCreationContext"),e("td",null,"Contains the context information of EngineConn during startup")]),e("tr",null,[e("td",null,"EngineConn"),e("td",null,"Contains the specific information of EngineConn, such as type, specific connection information with layer computing storage engine, etc.")]),e("tr",null,[e("td",null,"EngineExecution"),e("td",null,"Provide Executor creation logic")]),e("tr",null,[e("td",null,"EngineConnHook"),e("td",null,"Define the operations before and after each phase of engine startup")])])],-1),e("h2",null,"The core logic of linkis-engineconn-core engine connector",-1),e("p",null,"Defines the interfaces involved in the core logic of EngineConn.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core class"),e("th",null,"Core function")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnManager"),e("td",null,"Provide related interfaces for creating and obtaining EngineConn")]),e("tr",null,[e("td",null,"ExecutorManager"),e("td",null,"Provide related interfaces for creating and obtaining Executor")]),e("tr",null,[e("td",null,"ShutdownHook"),e("td",null,"Define the operation of the engine shutdown phase")])])],-1),e("h2",null,"linkis-engineconn-launch engine connector startup module",-1),e("p",null,"Defines the logic of how to start EngineConn.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core class"),e("th",null,"core function")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnServer"),e("td",null,"EngineConn microservice startup class")])])],-1),e("h2",null,"The core logic of the linkis-executor-core executor",-1),e("blockquote",null,[e("p",null,"Defines the core classes related to the actuator. The executor is a real computing scene executor, responsible for submitting user code to EngineConn.")],-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core class"),e("th",null,"Core function")])]),e("tbody",null,[e("tr",null,[e("td",null,"Executor"),e("td",null,"It is the actual computational logic execution unit and provides a top-level abstraction of the various capabilities of the engine.")]),e("tr",null,[e("td",null,"EngineConnAsyncEvent"),e("td",null,"Defines EngineConn-related asynchronous events")]),e("tr",null,[e("td",null,"EngineConnSyncEvent"),e("td",null,"Defines EngineConn-related synchronization events")]),e("tr",null,[e("td",null,"EngineConnAsyncListener"),e("td",null,"Defines EngineConn related asynchronous event listener")]),e("tr",null,[e("td",null,"EngineConnSyncListener"),e("td",null,"Defines EngineConn related synchronization event listener")]),e("tr",null,[e("td",null,"EngineConnAsyncListenerBus"),e("td",null,"Defines the listener bus for EngineConn asynchronous events")]),e("tr",null,[e("td",null,"EngineConnSyncListenerBus"),e("td",null,"Defines the listener bus for EngineConn synchronization events")]),e("tr",null,[e("td",null,"ExecutorListenerBusContext"),e("td",null,"Defines the context of the EngineConn event listener")]),e("tr",null,[e("td",null,"LabelService"),e("td",null,"Provide label reporting function")]),e("tr",null,[e("td",null,"ManagerService"),e("td",null,"Provides the function of information transfer with LinkisManager")])])],-1),e("h2",null,"linkis-callback-service callback logic",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core Class"),e("th",null,"Core Function")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnCallback"),e("td",null,"Define EngineConn’s callback logic")])])],-1),e("h2",null,"linkis-accessible-executor can be accessed executor",-1),e("p",null,"Executor that can be accessed. You can interact with it through RPC requests to get its status, load, concurrency and other basic indicators Metrics data.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core Class"),e("th",null,"Core Function")])]),e("tbody",null,[e("tr",null,[e("td",null,"LogCache"),e("td",null,"Provide log cache function")]),e("tr",null,[e("td",null,"AccessibleExecutor"),e("td",null,"The Executor that can be accessed can interact with it through RPC requests.")]),e("tr",null,[e("td",null,"NodeHealthyInfoManager"),e("td",null,"Manage Executor’s Health Information")]),e("tr",null,[e("td",null,"NodeHeartbeatMsgManager"),e("td",null,"Manage the heartbeat information of Executor")]),e("tr",null,[e("td",null,"NodeOverLoadInfoManager"),e("td",null,"Manage Executor load information")]),e("tr",null,[e("td",null,"Listener"),e("td",null,"Provides events related to Executor and the corresponding listener definition")]),e("tr",null,[e("td",null,"EngineConnTimedLock"),e("td",null,"Define Executor level lock")]),e("tr",null,[e("td",null,"AccessibleService"),e("td",null,"Provides the start-stop and status acquisition functions of Executor")]),e("tr",null,[e("td",null,"ExecutorHeartbeatService"),e("td",null,"Provides heartbeat related functions of Executor")]),e("tr",null,[e("td",null,"LockService"),e("td",null,"Provide lock management function")]),e("tr",null,[e("td",null,"LogService"),e("td",null,"Provide log management functions")])])],-1)],a={setup:(e,{expose:t})=>(t({frontmatter:{}}),(e,t)=>(n(),l("div",r,c)))},s={class:"markdown-body"},d=[e("h1",null,"EngineConn架构设计",-1),e("p",null,"EngineConn：引擎连接器，为其他微服务模块提供统一配置管理、上下文服务、物理库、数据源管理、微服务管理和历史任务查询等功能的模块。",-1),e("p",null,"一、EngineConn架构图",-1),e("p",null,[e("img",{src:i,alt:"EngineConn"})],-1),e("h1",null,"二级模块介绍：",-1),e("h2",null,"linkis-computation-engineconn交互式引擎连接器",-1),e("p",null,"提供交互式计算任务的能力。",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心类"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnTask"),e("td",null,"定义了提交给EngineConn的交互式计算任务")]),e("tr",null,[e("td",null,"ComputationExecutor"),e("td",null,"定义了交互式Executor，具备状态查询、任务kill等交互式能力。")]),e("tr",null,[e("td",null,"TaskExecutionService"),e("td",null,"提供对交互式计算任务的管理功能")])])],-1),e("h2",null,"linkis-engineconn-common引擎连接器的通用模块",-1),e("ol",null,[e("li",null,"定义了引擎连接器中最基础的实体类和接口。EngineConn是用于创建一个底层计算存储引擎的连接会话Session，包含引擎与具体集群的会话信息，是与具体引擎通信的client。")],-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心Service"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineCreationContext"),e("td",null,"包含了EngineConn在启动期间的上下文信息")]),e("tr",null,[e("td",null,"EngineConn"),e("td",null,"包含了EngineConn的具体信息，如类型、与层计算存储引擎的具体连接信息等")]),e("tr",null,[e("td",null,"EngineExecution"),e("td",null,"提供Executor的创建逻辑")]),e("tr",null,[e("td",null,"EngineConnHook"),e("td",null,"定义引擎启动各个阶段前后的操作")])])],-1),e("h2",null,"linkis-engineconn-core引擎连接器的核心逻辑",-1),e("p",null,"定义了EngineConn的核心逻辑涉及的接口。",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心类"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnManager"),e("td",null,"提供创建、获取EngineConn的相关接口")]),e("tr",null,[e("td",null,"ExecutorManager"),e("td",null,"提供创建、获取Executor的相关接口")]),e("tr",null,[e("td",null,"ShutdownHook"),e("td",null,"定义引擎关闭阶段的操作")])])],-1),e("h2",null,"linkis-engineconn-launch引擎连接器启动模块",-1),e("p",null,"定义了如何启动EngineConn的逻辑。",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心类"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnServer"),e("td",null,"EngineConn微服务的启动类")])])],-1),e("h2",null,"linkis-executor-core执行器的核心逻辑",-1),e("blockquote",null,[e("p",null,"定义了执行器相关的核心类。执行器是真正的计算场景执行器，负责将用户代码提交给EngineConn。")],-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心类"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"Executor"),e("td",null,"是实际的计算逻辑执行单元，并提供对引擎各种能力的顶层抽象。")]),e("tr",null,[e("td",null,"EngineConnAsyncEvent"),e("td",null,"定义了EngineConn相关的异步事件")]),e("tr",null,[e("td",null,"EngineConnSyncEvent"),e("td",null,"定义了EngineConn相关的同步事件")]),e("tr",null,[e("td",null,"EngineConnAsyncListener"),e("td",null,"定义了EngineConn相关异步事件监听器")]),e("tr",null,[e("td",null,"EngineConnSyncListener"),e("td",null,"定义了EngineConn相关同步事件监听器")]),e("tr",null,[e("td",null,"EngineConnAsyncListenerBus"),e("td",null,"定义了EngineConn异步事件的监听器总线")]),e("tr",null,[e("td",null,"EngineConnSyncListenerBus"),e("td",null,"定义了EngineConn同步事件的监听器总线")]),e("tr",null,[e("td",null,"ExecutorListenerBusContext"),e("td",null,"定义了EngineConn事件监听器的上下文")]),e("tr",null,[e("td",null,"LabelService"),e("td",null,"提供标签上报功能")]),e("tr",null,[e("td",null,"ManagerService"),e("td",null,"提供与LinkisManager进行信息传递的功能")])])],-1),e("h2",null,"linkis-callback-service回调逻辑",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心类"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnCallback"),e("td",null,"定义EngineConn的回调逻辑")])])],-1),e("h2",null,"linkis-accessible-executor能够被访问的执行器",-1),e("p",null,"能够被访问的Executor。可以通过RPC请求与它交互，从而获取它的状态、负载、并发等基础指标Metrics数据。",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心类"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"LogCache"),e("td",null,"提供日志缓存的功能")]),e("tr",null,[e("td",null,"AccessibleExecutor"),e("td",null,"能够被访问的Executor，可以通过RPC请求与它交互。")]),e("tr",null,[e("td",null,"NodeHealthyInfoManager"),e("td",null,"管理Executor的健康信息")]),e("tr",null,[e("td",null,"NodeHeartbeatMsgManager"),e("td",null,"管理Executor的心跳信息")]),e("tr",null,[e("td",null,"NodeOverLoadInfoManager"),e("td",null,"管理Executor的负载信息")]),e("tr",null,[e("td",null,"Listener"),e("td",null,"提供与Executor相关的事件以及对应的监听器定义")]),e("tr",null,[e("td",null,"EngineConnTimedLock"),e("td",null,"定义Executor级别的锁")]),e("tr",null,[e("td",null,"AccessibleService"),e("td",null,"提供Executor的启停、状态获取功能")]),e("tr",null,[e("td",null,"ExecutorHeartbeatService"),e("td",null,"提供Executor的心跳相关功能")]),e("tr",null,[e("td",null,"LockService"),e("td",null,"提供锁管理功能")]),e("tr",null,[e("td",null,"LogService"),e("td",null,"提供日志管理功能")])])],-1)],g={setup:(e,{expose:t})=>(t({frontmatter:{}}),(e,t)=>(n(),l("div",s,d)))},h={setup(l){const e=t(localStorage.getItem("locale")||"en");return(l,t)=>"en"===e.value?(n(),u(o(a),{key:0})):(n(),u(o(g),{key:1}))}};export{h as default};
