import{o as n,c as l,b as e,r as t,l as r,u as o}from"./vendor.1180558b.js";const i={class:"markdown-body"},u=[e("h2",null,"EngineConnManager architecture design",-1),e("p",null,"EngineConnManager (ECM): EngineConn’s manager, provides engine lifecycle management, and reports load information and its own health status to RM.",-1),e("h3",null,"ECM architecture",-1),e("p",null,[e("img",{src:"/assets/ECM-01.bb056ebe.png",alt:""})],-1),e("h3",null,"Introduction to the second-level module",-1),e("p",null,[e("strong",null,"Linkis-engineconn-linux-launch")],-1),e("p",null,"The engine launcher, whose core class is LinuxProcessEngineConnLauch, is used to provide instructions for executing commands.",-1),e("p",null,[e("strong",null,"Linkis-engineconn-manager-core")],-1),e("p",null,"The core module of ECM includes the top-level interface of ECM health report and EngineConn health report function, defines the relevant indicators of ECM service, and the core method of constructing EngineConn process.",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core top-level interface/class"),e("th",null,"Core function")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConn"),e("td",null,"Defines the properties of EngineConn, including methods and parameters")]),e("tr",null,[e("td",null,"EngineConnLaunch"),e("td",null,"Define the start method and stop method of EngineConn")]),e("tr",null,[e("td",null,"ECMEvent"),e("td",null,"ECM related events are defined")]),e("tr",null,[e("td",null,"ECMEventListener"),e("td",null,"Defined ECM related event listeners")]),e("tr",null,[e("td",null,"ECMEventListenerBus"),e("td",null,"Defines the listener bus of ECM")]),e("tr",null,[e("td",null,"ECMMetrics"),e("td",null,"Defines the indicator information of ECM")]),e("tr",null,[e("td",null,"ECMHealthReport"),e("td",null,"Defines the health report information of ECM")]),e("tr",null,[e("td",null,"NodeHealthReport"),e("td",null,"Defines the health report information of the node")])])],-1),e("p",null,[e("strong",null,"Linkis-engineconn-manager-server")],-1),e("p",null,"The server side of ECM defines top-level interfaces and implementation classes such as ECM health information processing service, ECM indicator information processing service, ECM registration service, EngineConn start service, EngineConn stop service, EngineConn callback service, etc., which are mainly used for ECM to itself and EngineConn Life cycle management, health information reporting, heartbeat sending, etc. Core Service and Features module are as follows:",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Core service"),e("th",null,"Core function")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnLaunchService"),e("td",null,"Contains core methods for generating EngineConn and starting the process")]),e("tr",null,[e("td",null,"BmlResourceLocallizationService"),e("td",null,"Used to download BML engine related resources and generate localized file directory")]),e("tr",null,[e("td",null,"ECMHealthService"),e("td",null,"Report your own healthy heartbeat to AM regularly")]),e("tr",null,[e("td",null,"ECMMetricsService"),e("td",null,"Report your own indicator status to AM regularly")]),e("tr",null,[e("td",null,"EngineConnKillSerivce"),e("td",null,"Provides related functions to stop the engine")]),e("tr",null,[e("td",null,"EngineConnListService"),e("td",null,"Provide caching and management engine related functions")]),e("tr",null,[e("td",null,"EngineConnCallBackService"),e("td",null,"Provide the function of the callback engine")])])],-1)],a={setup:(e,{expose:t})=>(t({frontmatter:{}}),(e,t)=>(n(),l("div",i,u)))};const s={class:"markdown-body"},d=[e("h2",null,"EngineConnManager架构设计",-1),e("p",null,"EngineConnManager（ECM）：EngineConn的管理器，提供引擎的生命周期管理，同时向RM汇报负载信息和自身的健康状况。",-1),e("h3",null,"一、ECM架构",-1),e("p",null,[e("img",{src:"/assets/ECM-01.bb056ebe.png",alt:""})],-1),e("h3",null,"二、二级模块介绍",-1),e("p",null,[e("strong",null,"Linkis-engineconn-linux-launch")],-1),e("p",null,"引擎启动器，核心类为LinuxProcessEngineConnLauch，用于提供执行命令的指令。",-1),e("p",null,[e("strong",null,"Linkis-engineconn-manager-core")],-1),e("p",null,"ECM的核心模块，包含ECM健康上报、EngineConn健康上报功能的顶层接口，定义了ECM服务的相关指标，以及构造EngineConn进程的核心方法。",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心顶层接口/类"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConn"),e("td",null,"定义了EngineConn的属性，包含的方法和参数")]),e("tr",null,[e("td",null,"EngineConnLaunch"),e("td",null,"定义了EngineConn的启动方法和停止方法")]),e("tr",null,[e("td",null,"ECMEvent"),e("td",null,"定义了ECM相关事件")]),e("tr",null,[e("td",null,"ECMEventListener"),e("td",null,"定义了ECM相关事件监听器")]),e("tr",null,[e("td",null,"ECMEventListenerBus"),e("td",null,"定义了ECM的监听器总线")]),e("tr",null,[e("td",null,"ECMMetrics"),e("td",null,"定义了ECM的指标信息")]),e("tr",null,[e("td",null,"ECMHealthReport"),e("td",null,"定义了ECM的健康上报信息")]),e("tr",null,[e("td",null,"NodeHealthReport"),e("td",null,"定义了节点的健康上报信息")])])],-1),e("p",null,[e("strong",null,"Linkis-engineconn-manager-server")],-1),e("p",null,"ECM的服务端，定义了ECM健康信息处理服务、ECM指标信息处理服务、ECM注册服务、EngineConn启动服务、EngineConn停止服务、EngineConn回调服务等顶层接口和实现类，主要用于ECM对自己和EngineConn的生命周期管理以及健康信息上报、发送心跳等。",-1),e("p",null,"模块中的核心Service和功能简介如下：",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"核心service"),e("th",null,"核心功能")])]),e("tbody",null,[e("tr",null,[e("td",null,"EngineConnLaunchService"),e("td",null,"包含生成EngineConn和启动进程的核心方法")]),e("tr",null,[e("td",null,"BmlResourceLocallizationService"),e("td",null,"用于将BML的引擎相关资源下载并生成本地化文件目录")]),e("tr",null,[e("td",null,"ECMHealthService"),e("td",null,"向AM定时上报自身的健康心跳")]),e("tr",null,[e("td",null,"ECMMetricsService"),e("td",null,"向AM定时上报自身的指标状况")]),e("tr",null,[e("td",null,"EngineConnKillSerivce"),e("td",null,"提供停止引擎的相关功能")]),e("tr",null,[e("td",null,"EngineConnListService"),e("td",null,"提供缓存和管理引擎的相关功能")]),e("tr",null,[e("td",null,"EngineConnCallBackService"),e("td",null,"提供回调引擎的功能")])])],-1),e("p",null,"ECM构建EngineConn启动流程：",-1),e("p",null,[e("img",{src:"/assets/ECM-02.a90e3890.png",alt:""})],-1)],c={setup:(e,{expose:t})=>(t({frontmatter:{}}),(e,t)=>(n(),l("div",s,d)))},C={setup(l){const e=t(localStorage.getItem("locale")||"en");return(l,t)=>"en"===e.value?(n(),r(o(a),{key:0})):(n(),r(o(c),{key:1}))}};export{C as default};
