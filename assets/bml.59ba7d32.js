import{o as l,c as e,b as t,r as n,l as r,u}from"./vendor.1180558b.js";const o={class:"markdown-body"},s=[t("h2",null,"Background",-1),t("p",null,"BML (Material Library Service) is a material management system of linkis, which is mainly used to store various file data of users, including user scripts, resource files, third-party Jar packages, etc., and can also store class libraries that need to be used when the engine is running.",-1),t("p",null,"It has the following functions:",-1),t("ol",null,[t("li",null,"Support various types of files. Supports text and binary files. If you are a user in the field of big data, you can store their script files and material compression packages in the system.")],-1),t("p",null,"2), the service is stateless, multi-instance deployment, to achieve high service availability. When the system is deployed, it can be deployed with multiple instances. Each instance provides services independently to the outside world without interfering with each other. All information is stored in the database for sharing.",-1),t("ol",{start:"3"},[t("li",null,[t("p",null,"Various ways of use. Provides two ways of Rest interface and SDK, users can choose according to their needs.")]),t("li",null,[t("p",null,"The file is appended to avoid too many small HDFS files. Many small HDFS files will lead to a decrease in the overall performance of HDFS. We have adopted a file append method to combine multiple versions of resource files into one large file, effectively reducing the number of files in HDFS.")]),t("li",null,[t("p",null,"Accurate authority control, safe storage of user resource file content. Resource files often have important content, and users only want to read it by themselves")]),t("li",null,[t("p",null,"Provide life cycle management of file upload, update, download and other operational tasks.")])],-1),t("h2",null,"Architecture diagram",-1),t("p",null,[t("img",{src:"/assets/bml-02.0eb3b26a.png",alt:"BML Architecture Diagram"})],-1),t("h2",null,"Schema description",-1),t("ol",null,[t("li",null,"The Service layer includes resource management, uploading resources, downloading resources, sharing resources, and project resource management.")],-1),t("p",null,"Resource management is responsible for basic operations such as adding, deleting, modifying, and checking resources, controlling access rights, and whether files are out of date.",-1),t("ol",{start:"2"},[t("li",null,[t("p",null,"File version control Each BML resource file has version information. Each update operation of the same resource will generate a new version. Of course, it also supports historical version query and download operations. BML uses the version information table to record the deviation position and size of each version of the resource file HDFS storage, and can store multiple versions of data on one HDFS file.")]),t("li",null,[t("p",null,"Resource file storage HDFS files are mainly used as actual data storage. HDFS files can effectively ensure that the material library files are not lost. The files are appended to avoid too many small HDFS files.")])],-1),t("h3",null,"Core Process",-1),t("p",null,[t("strong",null,"upload files:")],-1),t("ol",null,[t("li",null,[t("p",null,"Determine the operation type of the file uploaded by the user, whether it is the first upload or update upload. If it is the first upload, a new resource information record needs to be added. The system has generated a globally uniquely identified resource_id and a resource_location for this resource. The first version A1 of resource A needs to be stored in the resource_location location in the HDFS file system. After storing, you can get the first version marked as V00001. If it is an update upload, you need to find the latest version last time.")]),t("li",null,[t("p",null,"Upload the file stream to the specified HDFS file. If it is an update, it will be added to the end of the last content by file appending.")]),t("li",null,[t("p",null,"Add a new version record, each upload will generate a new version record. In addition to recording the metadata information of this version, the most important thing is to record the storage location of the version of the file, including the file path, start location, and end location.")])],-1),t("p",null,[t("strong",null,"download file:")],-1),t("ol",null,[t("li",null,[t("p",null,"When users download resources, they need to specify two parameters: one is resource_id and the other is version. If version is not specified, the latest version will be downloaded by default.")]),t("li",null,[t("p",null,"After the user passes in the two parameters resource_id and version to the system, the system queries the resource_version table, finds the corresponding resource_location, start_byte and end_byte to download, and uses the skipByte method of stream processing to set the front (start_byte- 1) skip bytes, then read to end_byte The number of bytes. After the reading is successful, the stream information is returned to the user.")]),t("li",null,[t("p",null,"Insert a successful download record in resource_download_history")])],-1),t("h2",null,"Database Design",-1),t("ol",null,[t("li",null,"Resource information table (resource)")],-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"Field name"),t("th",null,"Function"),t("th",null,"Remarks")])]),t("tbody",null,[t("tr",null,[t("td",null,"resource_id"),t("td",null,"A string that uniquely identifies a resource globally"),t("td",null,"UUID can be used for identification")]),t("tr",null,[t("td",null,"resource_location"),t("td",null,"The location where resources are stored"),t("td",null,"For example, hdfs:///tmp/bdp/${USERNAME}/")]),t("tr",null,[t("td",null,"owner"),t("td",null,"The owner of the resource"),t("td",null,"e.g. zhangsan")]),t("tr",null,[t("td",null,"create_time"),t("td",null,"Record creation time"),t("td")]),t("tr",null,[t("td",null,"is_share"),t("td",null,"Whether to share"),t("td",null,"0 means not to share, 1 means to share")]),t("tr",null,[t("td",null,"update_time"),t("td",null,"Last update time of the resource"),t("td")]),t("tr",null,[t("td",null,"is_expire"),t("td",null,"Whether the record resource expires"),t("td")]),t("tr",null,[t("td",null,"expire_time"),t("td",null,"Record resource expiration time"),t("td")])])],-1),t("ol",{start:"2"},[t("li",null,"Resource version information table (resource_version)")],-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"Field name"),t("th",null,"Function"),t("th",null,"Remarks")])]),t("tbody",null,[t("tr",null,[t("td",null,"resource_id"),t("td",null,"Uniquely identifies the resource"),t("td",null,"Joint primary key")]),t("tr",null,[t("td",null,"version"),t("td",null,"The version of the resource file"),t("td")]),t("tr",null,[t("td",null,"start_byte"),t("td",null,"Start byte count of resource file"),t("td")]),t("tr",null,[t("td",null,"end_byte"),t("td",null,"End bytes of resource file"),t("td")]),t("tr",null,[t("td",null,"size"),t("td",null,"Resource file size"),t("td")]),t("tr",null,[t("td",null,"resource_location"),t("td",null,"Resource file placement location"),t("td")]),t("tr",null,[t("td",null,"start_time"),t("td",null,"Record upload start time"),t("td")]),t("tr",null,[t("td",null,"end_time"),t("td",null,"End time of record upload"),t("td")]),t("tr",null,[t("td",null,"updater"),t("td",null,"Record update user"),t("td")])])],-1),t("ol",{start:"3"},[t("li",null,"Resource download history table (resource_download_history)")],-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"Field"),t("th",null,"Function"),t("th",null,"Remarks")])]),t("tbody",null,[t("tr",null,[t("td",null,"resource_id"),t("td",null,"Record the resource_id of the downloaded resource"),t("td")]),t("tr",null,[t("td",null,"version"),t("td",null,"Record the version of the downloaded resource"),t("td")]),t("tr",null,[t("td",null,"downloader"),t("td",null,"Record downloaded users"),t("td")]),t("tr",null,[t("td",null,"start_time"),t("td",null,"Record download time"),t("td")]),t("tr",null,[t("td",null,"end_time"),t("td",null,"Record end time"),t("td")]),t("tr",null,[t("td",null,"status"),t("td",null,"Whether the record is successful"),t("td",null,"0 means success, 1 means failure")]),t("tr",null,[t("td",null,"err_msg"),t("td",null,"Log failure reason"),t("td",null,"null means success, otherwise log failure reason")])])],-1)],i={setup:(t,{expose:n})=>(n({frontmatter:{}}),(t,n)=>(l(),e("div",o,s)))},d={class:"markdown-body"},a=[t("h2",null,"背景",-1),t("p",null,"BML（物料库服务）是linkis的物料管理系统，主要用来存储用户的各种文件数据，包括用户脚本、资源文件、第三方Jar包等，也可以存储引擎运行时需要使用到的类库。",-1),t("p",null,"具备以下功能点：",-1),t("p",null,"1)、支持各种类型的文件。支持文本形式和二进制形式的文件，如果是在大数据领域的用户，可以将他们的脚本文件、物料压缩包都可以存储到本系统中。",-1),t("p",null,"2）、服务无状态，多实例部署，做到服务高可用。本系统在部署的时候，可以进行多实例部署，每个实例对外独立提供服务，不会互相干扰，所有的信息都是存储在数据库中进行共享。",-1),t("p",null,"3）、使用方式多样。提供Rest接口和SDK两种方式，用户可以根据自己的需要进行选择。",-1),t("p",null,"4）、文件采用追加方式，避免过多的HDFS小文件。HDFS小文件多会导致HDFS整体性能的下降，我们采用了文件追加的方式，将多个版本的资源文件合成一个大文件，有效减少了HDFS的文件数量。",-1),t("p",null,"5)、精确权限控制，用户资源文件内容安全存储。资源文件往往会有重要的内容，用户只希望自己可读",-1),t("p",null,"6）、提供了文件上传、更新、下载等操作任务的生命周期管理。",-1),t("h2",null,"架构图",-1),t("p",null,[t("img",{src:"/assets/bml-02.0eb3b26a.png",alt:"BML架构图"})],-1),t("h2",null,"架构说明",-1),t("p",null,"1、Service层 包含资源管理、上传资源、下载资源、共享资源还有工程资源管理。",-1),t("p",null,"资源管理负责资源的增删改查操作，访问权限控制，文件是否过期等基本操作。",-1),t("p",null,"2、文件版本控制 每个BML资源文件都是具有版本信息的，同一个资源每次更新操作都会产生一个新的版本，当然也支持历史版本的查询和下载操作。BML使用版本信息表记录了每个版本的资源文件HDFS存储的偏离位置和大小，可以在一个HDFS文件上存储多个版本的数据。",-1),t("p",null,"3、资源文件存储 主要使用HDFS文件作为实际的数据存储，HDFS文件可以有效保证物料库文件不被丢失，文件采用追加方式，避免过多的HDFS小文件。",-1),t("h3",null,"核心流程",-1),t("p",null,[t("strong",null,"上传文件：")],-1),t("ol",null,[t("li",null,[t("p",null,"判断用户上传文件的操作类型，属于首次上传还是更新上传，如果是首次上传需要新增一条资源信息记录，系统已经为这个资源生成了一个全局唯一标识的resource_id和一个资源放置的位置resource_location。资源A的第一个版本A1需要在HDFS文件系统中resource_location位置进行存储。存储完之后，就可以得到第一个版本记为V00001，如果是更新上传需要查找上次最新的版本。")]),t("li",null,[t("p",null,"上传文件流到指定的HDFS文件，如果是更新则采用文件追加的方式加到上次内容的末尾。")]),t("li",null,[t("p",null,"新增一条版本记录，每次上传都会产生一条新的版本记录。除了记录这个版本的元数据信息外，最重要的是记录了该版本的文件的存储位置，包括文件路径，起始位置，结束位置。")])],-1),t("p",null,[t("strong",null,"下载文件：")],-1),t("ol",null,[t("li",null,[t("p",null,"用户下载资源的时候，需要指定两个参数一个是resource_id，另外一个是版本version，如果不指定version的话，默认下载最新版本。")]),t("li",null,[t("p",null,"用户传入resource_id和version两个参数到系统之后，系统查询resource_version表，查到对应的resource_location和start_byte和end_byte进行下载，通过流处理的skipByte方法，将resource_location的前(start_byte-1)个字节跳过，然后读取到end_byte 字节数。读取成功之后，将流信息返回给用户。")]),t("li",null,[t("p",null,"在resource_download_history中插入一条下载成功的记录")])],-1),t("h2",null,"数据库设计",-1),t("p",null,"1、资源信息表(resource)",-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"字段名"),t("th",null,"作用"),t("th",null,"备注")])]),t("tbody",null,[t("tr",null,[t("td",null,"resource_id"),t("td",null,"全局唯一标识一个资源的字符串"),t("td",null,"可以采用UUID进行标识")]),t("tr",null,[t("td",null,"resource_location"),t("td",null,"存放资源的位置"),t("td",null,"例如 hdfs:///tmp/bdp/${用户名}/")]),t("tr",null,[t("td",null,"owner"),t("td",null,"资源的所属者"),t("td",null,"例如 zhangsan")]),t("tr",null,[t("td",null,"create_time"),t("td",null,"记录创建时间"),t("td")]),t("tr",null,[t("td",null,"is_share"),t("td",null,"是否共享"),t("td",null,"0表示不共享，1表示共享")]),t("tr",null,[t("td",null,"update_time"),t("td",null,"资源最后的更新时间"),t("td")]),t("tr",null,[t("td",null,"is_expire"),t("td",null,"记录资源是否过期"),t("td")]),t("tr",null,[t("td",null,"expire_time"),t("td",null,"记录资源过期时间"),t("td")])])],-1),t("p",null,"2、资源版本信息表（resource_version）",-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"字段名"),t("th",null,"作用"),t("th",null,"备注")])]),t("tbody",null,[t("tr",null,[t("td",null,"resource_id"),t("td",null,"唯一标识资源"),t("td",null,"联合主键")]),t("tr",null,[t("td",null,"version"),t("td",null,"资源文件的版本"),t("td")]),t("tr",null,[t("td",null,"start_byte"),t("td",null,"资源文件开始字节数"),t("td")]),t("tr",null,[t("td",null,"end_byte"),t("td",null,"资源文件结束字节数"),t("td")]),t("tr",null,[t("td",null,"size"),t("td",null,"资源文件大小"),t("td")]),t("tr",null,[t("td",null,"resource_location"),t("td",null,"资源文件放置位置"),t("td")]),t("tr",null,[t("td",null,"start_time"),t("td",null,"记录上传的开始时间"),t("td")]),t("tr",null,[t("td",null,"end_time"),t("td",null,"记录上传的结束时间"),t("td")]),t("tr",null,[t("td",null,"updater"),t("td",null,"记录更新用户"),t("td")])])],-1),t("p",null,"3、资源下载历史表(resource_download_history)",-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"字段"),t("th",null,"作用"),t("th",null,"备注")])]),t("tbody",null,[t("tr",null,[t("td",null,"resource_id"),t("td",null,"记录下载资源的resource_id"),t("td")]),t("tr",null,[t("td",null,"version"),t("td",null,"记录下载资源的version"),t("td")]),t("tr",null,[t("td",null,"downloader"),t("td",null,"记录下载的用户"),t("td")]),t("tr",null,[t("td",null,"start_time"),t("td",null,"记录下载时间"),t("td")]),t("tr",null,[t("td",null,"end_time"),t("td",null,"记录结束时间"),t("td")]),t("tr",null,[t("td",null,"status"),t("td",null,"记录是否成功"),t("td",null,"0表示成功，1表示失败")]),t("tr",null,[t("td",null,"err_msg"),t("td",null,"记录失败原因"),t("td",null,"null表示成功，否则记录失败原因")])])],-1)],c={setup:(t,{expose:n})=>(n({frontmatter:{}}),(t,n)=>(l(),e("div",d,a)))},h={setup(e){const t=n(localStorage.getItem("locale")||"en");return(e,n)=>"en"===t.value?(l(),r(u(i),{key:0})):(l(),r(u(c),{key:1}))}};export{h as default};
