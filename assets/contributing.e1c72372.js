import{o as e,c as t,m as o,r as n,b as i,l as r,u as s}from"./vendor.1180558b.js";const a={class:"markdown-body"},c=[o("<h1>Contributing</h1><p>Thank you very much for contributing to the Linkis project! Before participating in the contribution, please read the following guidelines carefully.</p><h2>1. Contribution category</h2><h3>1.1 Bug feedback and fix</h3><p>We suggest that whether it is bug feedback or repair, you should create an issue first to describe the status of the bug in detail, so as to help the community to find and review issues and codes through issue records. Bug feedback issues usually need to include a complete description <strong>Bug</strong> information and reproducible scenarios, so that the community can quickly locate the cause of the bug and fix it. Opened issues that contain #bug label all need to be fixed.</p><h3>1.2 Functional communication, implementation and refactoring</h3><p>In the communication process, please elaborate the details, mechanisms and using scenarios of the new function(or refactoring). This can promote the function(or refactoring) to be implemented better and faster. If you plan to implement a major feature (or refactoring), be sure to communicate with the team through <strong>Issue</strong> or other methods, so that everyone can move forward in the most efficient way. An open Issue containing the #feature tag means that there are new functions need to be implemented. And open issues including #Enhancement tags always means that needs to be improved for refactoring.</p><h3>1.3 Issue Q&amp;A</h3><p>Helping to answer the usage questions in the Issue is a very valuable way to contribute to the Linkis community; There will always be new users keeping coming in. While helping new users, you can also show your expertise.</p><h3>1.4 Documentation improvements</h3><p>Linkis User Manual Documents are maintained in the Linkis-Doc project of github, you can edit the markdown file in the project and improve the document by submit a pr.</p><h2>2. Contribution process</h2><h3>2.1 Branch structure</h3><p>The Linkis source code may contain some temporary branches, but there are only three branches as followed that are really meaningful:</p><pre><code>master: The source code of the last stable release, and occassionally may have several hotfix submissions\nbranch-0.10.0: The latest stable version\ndev-1.0.0: Main development branch\n</code></pre><h3>2.2 Development Guidelines</h3><p>Linkis front-end and back-end code share the same code repository, but they are separated in development. Before embarking on development, please fork a copy of Linkis project to your own Github Repositories. When developing, please do it based on your own Github Repositories.</p><p>We recommend cloning the dev-1.0.0 branch for development, so there will be much less conflicts on merging when submitting a PR to the Linkis main project Much smaller</p><pre><code>git clone https://github.com/yourname/Linkis.git --branch dev-1.0.0\n</code></pre><h4>2.2.1 Backend</h4><p>The user configuration is under the project root directory /config/, the project startup script and the upgrade patch script are under the project root directory /bin/. The back-end code and core configuration are in the server/ directory, and the log is in the project root directory /log/. The root directory of the project mentioned here refers to the directory configured by the environment variable LINKIS_HOME, and the environment variable needs to be configured during the development of the IDE. For example, Idea regarding the priority of environment variable loading from high to low: Environment configured in Run/Debug Configurations variables —&gt; System environment variables cached by the IDE.</p><p><strong>2.2.1.1</strong> Directory structure</p><pre><code>1. Script\n</code></pre><pre><code>├── assembly-package/bin # script directory\n ├── install.sh # One-click deployment script\n ├── checkEnv.sh # Environment check script\n └── common.sh # Common script function\n</code></pre><pre><code>├── sbin # script directory\n ├── linkis-daemon.sh # Single service start and stop, status detection script\n ├── linkis-start-all.sh # One-click start script\n ├── linkis-stop-all.sh # One-click stop script\n └── ext # Separate service script directory\n    ├── linkis-xxx.sh # The startup script of a service\n    ├── linkis-xxx.sh\n    ├── ...\n</code></pre><pre><code>2. Configuration\n</code></pre><pre><code>├── assembly-package/config # User configuration directory\n ├── linkis-env.sh # Configuration variable settings for one-click deployment\n ├── db.sh # One-click deployment database configuration\n</code></pre><pre><code>3. Code directory structure\nSee Linkis code directory structure for details\n4. Log directory\n</code></pre><pre><code>├── logs # log root directory\n</code></pre><p><strong>2.2.1.2</strong> Environment variables</p><pre><code>Configure system environment variable or IDE environment variable LINKIS_HOME, it is recommended to use IDE environment variable first.\n</code></pre><p><strong>2.2.1.3</strong> Database</p><pre><code>1. Create the Linkis system database by yourself;\n2. Modify the corresponding information of the database in conf/db.sh and execute bin/install.sh or import directly on the database client\ndb/linkis_*.sql.\n</code></pre><p><strong>2.2.1.4</strong> Configuration file</p><p>Modify the application-linkis.yml file in the conf directory and the properties file corresponding to each microservice name to configure related properties.</p><p><strong>2.2.1.5</strong> Packaging</p><pre><code>1. To package the project, you need to modify the version in /assembly/src/main/assembly/assembly.xml in the root directory, and then execute the following command in the root directory: mvn clean package;\nTo package a single module, simply run mvn clean package directly in each module.\n</code></pre><h3>2.3 Pull Request Guidelines</h3><h4>If you still don’t know how to initiate a PR to an open source project, please refer to this description</h4><pre><code>Whether it is bug fixes or new feature development, please submit a PR to the dev-1.0.0 branch.\nPR and submission name follow the principle of &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;. For details, please refer to Ruan Yifeng&#39;s article [Commitmessage and Change log Compilation Guide](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html).\nIf the PR contains new features, the document update should be included in this PR.\nIf this PR is not ready to merge, please add the [WIP] prefix to the head of the name (WIP = work-in-progress).\nAll submissions to the dev-1.0.0 branch need to go through at least one review before they can be merged\n</code></pre><h3>2.4 Review Standard</h3><p>Before contributing code, you can find out what kind of submissions are popular in Review. Simply put, if a submission can bring as many gains as possible and as few side effects or risks as possible, then it will be reviewd and merged first. Submissions with high risk and low value are almost impossible to be merged, and may be rejected without even a chance to review.</p><p><strong>2.4.1</strong> Gain</p><pre><code>Fix the main cause of the bug\nAdd or fix a feature or problem that a large number of users urgently need\nSimple and effective\nEasy to test, with test cases\nReduce complexity and amount of code\n</code></pre><h4>Issues that have been discussed by the community and identified for improvement</h4><h4>2.4.2 Side effects and risks</h4><pre><code>Only fix the surface phenomenon of the bug\nIntroduce new features with high complexity\nAdd complexity to meet niche needs\nChange stable existing API or semantics\nCause other functions to not operate normally\nAdd a lot of dependencies\nChange the dependency version at will\nSubmit a large amount of code or changes at once\n</code></pre><p><strong>2.4.3 Reviewer</strong> Note</p><pre><code>Please use a constructive tone to write comments\nIf you need to make changes by the submitter, please clearly state all the content that needs to be modified to complete the Pull Request\nIf a PR is found to have brought new problems after the merger, the Reviewer needs to contact the PR author and communicate to resolve the problem.\nQuestion; if the PR author cannot be contacted, the Reviewer needs to restore the PR\n</code></pre><h2>3. advanced contribution</h2><h3>3.1 About Committers (Collaborators)</h3><p><strong>3.1.1</strong> How to become a <strong>committer</strong></p><p>If you have had a valuable PR for the Linkis code and it has been merged, you can contact the core development team through the official WeChat group Team applied to be the Committer of the Linkis project; the core development team and other Committers will vote together to decide whether or not allow you to join. If you get enough votes, you will become a Committer for the Linkis project.</p><p><strong>3.1.2 Committer</strong> Rights</p><pre><code>You can join the official developer WeChat group, participate in discussions and make development plans\nCan manage Issues, including closing and adding tags\nCan create and manage project branches, except for master and dev-1.0.0 branches\nCan review the PR submitted to the dev-1.0.0 branch\nCan apply to be a member of Committee\n</code></pre><h3>3.2 About Committee</h3><p><strong>3.2.1</strong> How to become a <strong>Committee</strong> member</p><p>If you are a Committer of the Linkis project, and all your contributions have been recognized by other Committee members. Yes, you can apply to be a member of the Linkis Committee, and other Committee members will vote together to decide whether to allow you to join in, and if unanimously approved, you will become a member of the Linkis Committee.</p><p>**3.2.2 Committee members’ rights</p><pre><code>You can merge PRs submitted by other Committers and contributors to the dev-1.0.0 branch\n</code></pre>",60)],p={setup:(o,{expose:n})=>(n({frontmatter:{}}),(o,n)=>(e(),t("div",a,c)))},h={class:"markdown-body"},d=[o("<h1>Contributing</h1><p>非常感谢贡献Linkis项目！在参与贡献之前，请仔细阅读以下指引。</p><h2>一、贡献范畴</h2><h3>1.1 Bug 反馈与修复</h3><p>我们建议无论是 Bug 反馈还是修复，都先创建一个 Issue 来仔细描述 Bug 的状况，以助于社 区可以通过 Issue 记录来找到和回顾问题以及代码。Bug 反馈 Issue 通常需要包含完整描述 <strong>Bug</strong> 的信息以及可复现的场景，这样社区才能快速定位导致 Bug 的原因并修复它。包含 #bug 标签的打开的 Issue 都是需要被修复的。</p><h3>1.2 功能交流、实现、重构</h3><p>在交流过程中，详细描述新功能（或重构）的细节、机制和使用场景，能够促使它更好更快地 被实现。如果计划实现一个重大的功能（或重构），请务必通过 <strong>Issue</strong> 或其他方式与核心开 发团队进行沟通，这样大家能以最效率的方式来推进它。包含 #feature 标签的打开的 Issue 都是需要被实现的新功能，包含 #enhancement 标签的打开的 Issue 都是需要改进重构的功 能。</p><h3>1.3 Issue 答疑</h3><p>帮助回答 Issue 中的使用问题是为 Linkis 社区做贡献的一个非常有价值的方式；社区中总会有 新用户不断进来，在帮助新用户的同时，也可以展现你的专业知识。</p><h3>1.4 文档改进</h3><p>Linkis 用户手册文档维护在github的Linkis-Doc项目中，可以编辑项目里的 Markdown 文件，通过提pr的方式来对文档做改进。</p><h2>二、贡献流程</h2><h3>2.1 分支结构</h3><p>Linkis 源码可能会产生一些临时分支，但真正有明确意义的只有以下三个分支：</p><pre><code>master: 最近一次稳定 release 的源码，偶尔会多几次 hotfix 提交；\nbranch-0.10.0: 最新稳定版\ndev-1.0.0: 主要开发分支；\n</code></pre><h3>2.2 开发指引</h3><p>Linkis 前后端代码共用同一个代码库，但在开发上是分离的。在着手开发之前，请先将 Linkis 项目 fork 一份到自己的 Github Repositories 中， 开发时请基于自己 Github Repositories 中的Linkis 代码库进行开发。</p><p>我们建议克隆 dev-1.0.0 分支来开发，这样在向 Linkis 主项目提交 PR 时合并冲突的可能性会 小很多</p><pre><code>git clone https://github.com/yourname/Linkis.git --branch dev-1.0.0\n</code></pre><h4>2.2.1 后端</h4><p>用户配置在项目根目录 /config/ 下，项目启动脚本和升级补丁脚本在项目根目录 /bin/ 下， 后端代码及核心配置在 server/ 目录下, 日志在项目根目录 /log/ 下。注意：此处所指项目根目 录都指环境变量 LINKIS_HOME 所配置的目录，在使用 IDE 开发过程中也需要配置环境变量， 如 Idea 关于环境变量加载的优先级：Run/Debug Configurations 中配置的 Environment variables —&gt; IDE缓存的系统环境变量。</p><p><strong>2.2.1.1</strong> 目录结构</p><pre><code>1. 脚本\n</code></pre><pre><code>├── assembly-package/bin # 脚本目录\n ├── install.sh # 一键部署脚本\n ├── checkEnv.sh # 环境检查脚本\n └── common.sh # 通用脚本函数\n</code></pre><pre><code>├── sbin # 脚本目录\n ├── linkis-daemon.sh # 单服务启停、状态检测脚本\n ├── linkis-start-all.sh # 一键启动脚本\n ├── linkis-stop-all.sh # 一键停止脚本\n └── ext # 单独服务脚本目录\n    ├── linkis-xxx.sh # 某个服务的启动脚本\n    ├── linkis-xxx.sh \n    ├── ...\n</code></pre><pre><code>2. 配置\n</code></pre><pre><code>├── assembly-package/config # 用户配置目录\n ├── linkis-env.sh # 一键部署的配置变量设置\n ├── db.sh # 一键部署的数据库配置\n</code></pre><pre><code>3. 代码目录结构\n详见 Linkis代码目录结构\n4. 日志目录\n</code></pre><pre><code>├── logs # 日志根目录\n</code></pre><p><strong>2.2.1.2</strong> 环境变量</p><pre><code>配置系统环境变量或 IDE 环境变量 LINKIS_HOME，推荐优先使用 IDE 环境变量。\n</code></pre><p><strong>2.2.1.3</strong> 数据库</p><pre><code>1. 自行创建 Linkis 系统数据库；\n2. 修改 conf/db.sh 中的数据库相应信息并执行bin/install.sh 或 直接在数据库客户端导入\ndb/linkis_*.sql。\n</code></pre><p><strong>2.2.1.4</strong> 配置文件</p><p>修改conf目录下的application-linkis.yml文件，以及各微服务名对应的properties文件，配置相关属性。</p><p><strong>2.2.1.5</strong> 打包</p><pre><code>1. 打完整 release 包需要修改根目录下 /assembly/src/main/assembly/assembly.xml 中相关版本信息，然后在根目录下执行: mvn clean package 即可；\n2. 打每个模块 的包可直接在 模块目录下执行 mvn clean package。\n</code></pre><h3>2.3 Pull Request 指引</h3><h4>如果你还不知道怎样向开源项目发起 PR，请参考这篇说明</h4><pre><code>无论是 Bug 修复，还是新功能开发，请将 PR 提交到 dev-1.0.0 分支。\nPR 和提交名称遵循 &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; 原则，详情可以参考阮一峰的[Commitmessage 和 Change log 编写指南](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html) 这篇文章。\n如果 PR 中包含新功能，理应将文档更新包含在本次 PR 中。\n如果本次 PR 尚未准备好合并，请在名称头部加上 [WIP] 前缀（WIP = work-in-\nprogress）。\n所有提交到 dev-1.0.0 分支的提交至少需要经过一次 Review 才可以被合并\n</code></pre><h3>2.4 Review 标准</h3><p>在贡献代码之前，可以了解一下什么样的提交在 Review 中是受欢迎的。简单来说，如果一项 提交能带来尽可能多增益和尽可能少的副作用或风险，那它被合并的几率就越高，Review 的 速度也会越快。风险大、价值低的提交是几乎不可能被合并的，并且有可能会被拒绝连 Review 的机会都没有。</p><p><strong>2.4.1</strong> 增益</p><pre><code>修复导致 Bug 的主要原因\n添加或修复一个大量用户亟需的功能或问题\n简单有效\n容易测试，有测试用例\n减少复杂度以及代码量\n</code></pre><h4>经社区讨论过的、确定需要改进的问题</h4><h4>2.4.2 副作用和风险</h4><pre><code>仅仅修复 Bug 的表面现象\n引入复杂度高的新功能\n为满足小众需求添加复杂度\n改动稳定的现有API或语义\n导致其他功能不能正常运行\n添加大量依赖\n随意改变依赖版本\n一次性提交大量代码或改动\n</code></pre><p><strong>2.4.3 Reviewer</strong> 注意事项</p><pre><code>请使用建设性语气撰写评论\n如果需要提交者进行修改，请明确说明完成此次 Pull Request 所需要修改的所有内容\n如果某次 PR 在合并后发现带来了新问题，Reviewer 需要向 PR 作者联系并沟通解决问\n题；如果无法联系到 PR 作者，Reviewer 需要将此次 PR 进行还原\n</code></pre><h2>三、贡献进阶</h2><h3>3.1 关于 Committers （ Collaborators ）</h3><p><strong>3.1.1</strong> 如何成为 <strong>Committer</strong></p><p>如果你对 Linkis 代码有过颇具价值的 PR 并且被合并，你可以通过官方微信群联系核心开发团 队申请成为 Linkis 项目的 Committer；核心开发团队和其他 Committers 将会一起投票决定是否允许你的加入，如果得到足够票数，你将成为 Linkis 项目的 Committer。</p><p><strong>3.1.2 Committer</strong> 的权利</p><pre><code>可以加入官方开发者微信群，参与讨论和制定开发计划\n可以对 Issue 进行管理，包括关闭、添加标签\n可以创建和管理项目分支，master、dev-1.0.0 分支除外\n可以对提交到 dev-1.0.0 分支的 PR 进行 Review\n可以申请成为 Committee 成员\n</code></pre><h3>3.2 关于 Committee</h3><p><strong>3.2.1</strong> 如何成为 <strong>Committee</strong> 成员</p><p>如果你是 Linkis 项目的 Committer，并且你贡献的所有内容得到了其他 Committee 成员的认 可，你可以申请成为 Linkis Committee 成员，其他 Committee 成员将会一起投票决定是否允 许你的加入，如果全票通过，你将成为 Linkis Committee 成员。</p><p><strong>3.2.2 Committee</strong> 成员的权利</p><pre><code>可以合并其他 Committers 和贡献者提交到 dev-1.0.0 分支的 PR\n</code></pre>",60)],m={setup:(o,{expose:n})=>(n({frontmatter:{}}),(o,n)=>(e(),t("div",h,d)))},l={class:"ctn-block reading-area blog-ctn"},u={class:"main-content"},g={setup(o){const a=n(localStorage.getItem("locale")||"en");return(o,n)=>(e(),t("div",l,[i("main",u,["en"===a.value?(e(),r(s(p),{key:0})):(e(),r(s(m),{key:1}))])]))}};export{g as default};
