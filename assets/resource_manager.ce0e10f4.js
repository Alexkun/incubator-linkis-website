import{o as e,c as l,b as n,e as r,r as t,l as o,u as a}from"./vendor.1180558b.js";var u="/assets/linkis-manager-01.fb5e443a.png",s="/assets/resource-manager-01.86e09124.png";const i={class:"markdown-body"},c=[n("h2",null,"1. Background",-1),n("p",null,"        ResourceManager (RM for short) is the computing resource management module of Linkis. All EngineConn (EC for short), EngineConnManager (ECM for short), and even external resources including Yarn are managed by RM. RM can manage resources based on users, ECM, or other granularities defined by complex tags.",-1),n("h2",null,"2. The role of RM in Linkis",-1),n("p",null,[n("img",{src:u,alt:"01"}),n("br"),n("img",{src:s,alt:"02"}),n("br"),r("         As a part of Linkis Manager, RM mainly functions as follows: maintain the available resource information reported by ECM, process the resource application submitted by ECM, record the actual resource usage information reported by EC in real time during the life cycle after successful application, and provide query current resource usage The relevant interface of the situation."),n("br"),r(" In Linkis, other services that interact with RM mainly include:")],-1),n("ol",null,[n("li",null,[r("Engine Manager, ECM for short: Processes the microservices that start the engine connector request. As a resource provider, ECM is responsible for registering and unregistering resources with RM. At the same time, as the manager of the engine, ECM is responsible for applying for resources from RM instead of the new engine connector that is about to start. For each ECM instance, there is a corresponding resource record in the RM, which contains information such as the total resources and protection resources it provides, and dynamically updates the used resources."),n("br"),n("img",{src:"/assets/rm-03.8382829b.png",alt:"03"})]),n("li",null,[r("The engine connector, referred to as EC, is the actual execution unit of user operations. At the same time, as the actual user of the resource, the EC is responsible for reporting the actual use of the resource to the RM. Each EC has a corresponding resource record in the RM: during the startup process, it is reflected as a locked resource; during the running process, it is reflected as a used resource; after being terminated, the resource record is subsequently deleted."),n("br"),n("img",{src:"/assets/rm-04.2385c2db.png",alt:"04"})])],-1),n("h2",null,"3. Resource type and format",-1),n("p",null,[n("img",{src:"/assets/rm-05.347294cd.png",alt:"05"}),n("br"),r("         As shown in the figure above, all resource classes implement a top-level Resource interface, which defines the calculation and comparison methods that all resource classes need to support, and overloads the corresponding mathematical operators to enable resources to be Directly calculated and compared like numbers.")],-1),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Operator"),n("th",null,"Correspondence Method"),n("th",null,"Operator"),n("th",null,"Correspondence Method")])]),n("tbody",null,[n("tr",null,[n("td",null,"+"),n("td",null,"add"),n("td",null,">"),n("td",null,"moreThan")]),n("tr",null,[n("td",null,"-"),n("td",null,"minus"),n("td",null,"<"),n("td",null,"lessThan")]),n("tr",null,[n("td",null,"*"),n("td",null,"multiply"),n("td",null,"="),n("td",null,"equals")]),n("tr",null,[n("td",null,"/"),n("td",null,"divide"),n("td",null,">="),n("td",null,"notLessThan")]),n("tr",null,[n("td",null,"<="),n("td",null,"notMoreThan"),n("td"),n("td")])])],-1),n("p",null,"        The currently supported resource types are shown in the following table. All resources have corresponding json serialization and deserialization methods, which can be stored in json format and transmitted across the network:",-1),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"Resource Type"),n("th",null,"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,"MemoryResource"),n("td",null,"Memory Resource")]),n("tr",null,[n("td",null,"CPUResource"),n("td",null,"CPU Resource")]),n("tr",null,[n("td",null,"LoadResource"),n("td",null,"Both memory and CPU resources")]),n("tr",null,[n("td",null,"YarnResource"),n("td",null,"Yarn queue resources (queue, queue memory, queue CPU, number of queue instances)")]),n("tr",null,[n("td",null,"LoadInstanceResource"),n("td",null,"Server resources (memory, CPU, number of instances)")]),n("tr",null,[n("td",null,"DriverAndYarnResource"),n("td",null,"Driver and executor resources (with server resources and Yarn queue resources at the same time)")]),n("tr",null,[n("td",null,"SpecialResource"),n("td",null,"Other custom resources")])])],-1),n("h2",null,"4. Available resource management",-1),n("p",null,[r("        The available resources in the RM mainly come from two sources: the available resources reported by the ECM, and the resource limits configured according to tags in the Configuration module."),n("br"),n("strong",null,"ECM resource report"),r(":")],-1),n("ol",null,[n("li",null,[n("p",null,"When the ECM is started, it will broadcast the ECM registration message. After receiving the message, the RM will register the resource according to the content contained in the message. The resource-related content includes:"),n("ol",null,[n("li",null,[n("p",null,"Total resources: the total number of resources that the ECM can provide.")]),n("li",null,[n("p",null,"Protect resources: When the remaining resources are less than this resource, no further resources are allowed to be allocated.")]),n("li",null,[n("p",null,"Resource type: such as LoadResource, DriverAndYarnResource and other type names.")]),n("li",null,[n("p",null,"Instance information: machine name plus port name.")])])]),n("li",null,[n("p",null,"After RM receives the resource registration request, it adds a record in the resource table, the content is consistent with the parameter information of the interface, and finds the label representing the ECM through the instance information, and adds an association in the resource and label association table recording.")]),n("li",null,[n("p",null,"When the ECM is closed, it will broadcast a message that the ECM is closed. After receiving the message, the RM will go offline according to the ECM instance information in the message, that is, delete the resource and associated records corresponding to the ECM instance tag.")])],-1),n("p",null,[n("strong",null,"Configuration模块标签资源配置"),r("："),n("br"),r("         In the Configuration module, users can configure the number of resources based on different tag combinations, such as limiting the maximum available resources of the User/Creator/EngineType combination.")],-1),n("p",null,"        The RM queries the Configuration module for resource information through the RPC message, using the combined tag as the query condition, and converts it into a Resource object to participate in subsequent comparison and recording.",-1),n("h2",null,"5. Resource Usage Management",-1),n("p",null,[n("strong",null,"Receive user’s resource application:")],-1),n("ol",null,[n("li",null,[n("p",null,[r("When LinkisManager receives a request to start EngineConn, it will call RM’s resource application interface to apply for resources. The resource application interface accepts an optional time parameter. When the waiting time for applying for a resource exceeds the limit of the time parameter, the resource application will be automatically processed as a failure."),n("br"),n("strong",null,"Judging whether there are enough resources:"),n("br"),r(" That is, to determine whether the remaining available resources are greater than the requested resources, if greater than or equal to, the resources are sufficient; otherwise, the resources are insufficient.")])]),n("li",null,[n("p",null,"RM preprocesses the label information attached to the resource application, and filters, combines and converts the original labels according to the rules (such as combining the User/Creator label and EngineType label), which makes the subsequent resource judgment more granular flexible.")]),n("li",null,[n("p",null,"Lock each converted label one by one, so that their corresponding resource records remain unchanged during the processing of resource applications.")]),n("li",null,[n("p",null,"According to each label:"),n("ol",null,[n("li",null,[n("p",null,"Query the corresponding resource record from the database through the Persistence module. If the record contains the remaining available resources, it is directly used for comparison.")]),n("li",null,[n("p",null,"If there is no direct remaining available resource record, it will be calculated by the formula of [Remaining Available Resource=Maximum Available Resource-Used Resource-Locked Resource-Protected Resource].")]),n("li",null,[n("p",null,"If there is no maximum available resource record, request the Configuration module to see if there is configured resource information, if so, use the formula for calculation, if not, skip the resource judgment for this tag.")]),n("li",null,[n("p",null,"If there is no resource record, skip the resource judgment for this tag.")])])]),n("li",null,[n("p",null,"As long as one tag is judged to be insufficient in resources, the resource application will fail, and each tag will be unlocked one by one.")]),n("li",null,[n("p",null,"Only when all tags are judged to be sufficient resources, can the resource application be successfully passed and proceed to the next step.")])],-1),n("p",null,[n("strong",null,"lock by application of resources:")],-1),n("ol",null,[n("li",null,[n("p",null,"The number of resource request by generating a new record in the resource table, and associated with each tag.")]),n("li",null,[n("p",null,"If there is a tag corresponding to the remaining available resource record, the corresponding number of the abatement.")]),n("li",null,[n("p",null,"Generate a timed task, the lock checks whether these resources are actually used after a certain time, if the timeout is not used, it is mandatory recycling.")]),n("li",null,[n("p",null,"unlock each tag.")])],-1),n("p",null,[n("strong",null,"report the actual use of resources:")],-1),n("ol",null,[n("li",null,[n("p",null,"EngineConn after the start, broadcast a resource utilization message. RM after receiving the message, check whether the label corresponding to the EngineConn lock resource record, and if not, an error.")]),n("li",null,[n("p",null,"If you have locked resource, the EngineConn all labels associated lock.")]),n("li",null,[n("p",null,"For each tag, the resource record corresponding lock record for the conversion of used resources.")]),n("li",null,[n("p",null,"Unlock all labels.")])],-1),n("p",null,[n("strong",null,"Release actual used resources:")],-1),n("ol",null,[n("li",null,[n("p",null,"EngineConn after the end of the life cycle, recycling broadcast messages. RM after receiving the message, check whether the EngineConn corresponding label resources have been recorded.")]),n("li",null,[n("p",null,"If so, all the labels associated EngineConn be locked.")])],-1),n("p",null,"3, minus the amount used in the corresponding resource record for each label.",-1),n("ol",{start:"4"},[n("li",null,[n("p",null,"If there is a tag corresponding to the remaining available resource record, the corresponding increase in number.")]),n("li",null,[n("p",null,"The unlocking each tag")])],-1),n("h2",null,"6. External resource management",-1),n("p",null,"        In RM, in order to classify resources more flexibly and expansively, support multi-cluster resource management and control, and at the same time make it easier to access new external resources, the following considerations have been made in the design:",-1),n("ol",null,[n("li",null,[n("p",null,"Unified management of resources through tags. After the resource is registered, it is associated with the tag, so that the attributes of the resource can be expanded infinitely. At the same time, resource applications are also tagged to achieve flexible matching.")]),n("li",null,[n("p",null,"Abstract the cluster into one or more tags, and maintain the environmental information corresponding to each cluster tag in the external resource management module to achieve dynamic docking.")]),n("li",null,[n("p",null,[r("Abstract a general external resource management module. If you need to access new external resource types, you can convert different types of resource information into Resource entities in the RM as long as you implement a fixed interface to achieve unified management."),n("br"),n("img",{src:"/assets/rm-06.dde9d64d.png",alt:"06"})])])],-1),n("p",null,"        Other modules of RM obtain external resource information through the interface provided by ExternalResourceService.",-1),n("p",null,"        The ExternalResourceService obtains information about external resources through resource types and tags:",-1),n("ol",null,[n("li",null,[n("p",null,"The type, label, configuration and other attributes of all external resources (such as cluster name, Yarn web url, Hadoop version and other information) are maintained in the linkis_external_resource_provider table.")]),n("li",null,[n("p",null,"For each resource type, there is an implementation of the ExternalResourceProviderParser interface, which parses the attributes of external resources, converts the information that can be matched to the Label into the corresponding Label, and converts the information that can be used as a parameter to request the resource interface into params . Finally, an ExternalResourceProvider instance that can be used as a basis for querying external resource information is constructed.")]),n("li",null,[n("p",null,"According to the resource type and label information in the parameters of the ExternalResourceService method, find the matching ExternalResourceProvider, generate an ExternalResourceRequest based on the information in it, and formally call the API provided by the external resource to initiate a resource information request.")])],-1)],d={setup:(n,{expose:r})=>(r({frontmatter:{}}),(n,r)=>(e(),l("div",i,c)))},h={class:"markdown-body"},p=[n("p",null,"ResourceManager（简称RM），是Linkis的计算资源管理模块，所有的EngineConn（简称EC）、EngineConnManager（简称ECM），甚至包括Yarn在内的外部资源，都由RM负责统筹管理。RM能够基于用户、ECM或其它通过复杂标签定义的粒度对资源进行管控。",-1),n("h3",null,"RM在Linkis中的作用",-1),n("p",null,[n("img",{src:u,alt:"01"}),n("img",{src:s,alt:"02"}),r(" RM作为Linkis Manager的一部分，主要作用为：维护ECM上报的可用资源信息，处理ECM提出的资源申请，记录成功申请后，EC在生命周期内实时上报的实际资源使用信息，并提供查询当前资源使用情况的相关接口。")],-1),n("p",null,"Linkis中，与RM产生交互的其它服务主要有：",-1),n("ol",null,[n("li",null,[r("引擎管理器，简称ECM：处理启动引擎连接器请求的微服务。ECM作为资源的提供者，负责向RM注册资源(register)和下线资源(unregister)。同时，ECM作为引擎的管理者，负责代替准备启动的新引擎连接器向RM申请资源。每一个ECM实例，均在RM中有一条对应的资源记录，包含它提供的总资源、保护资源等信息，并动态更新已使用资源。 "),n("img",{src:"/assets/rm-03.8382829b.png",alt:"03"})]),n("li",null,[r("引擎连接器，简称EC，是用户作业的实际执行单元。同时，EC作为资源的实际使用者，负责向RM上报实际使用资源。每一个EC，均在RM中有一条对应的资源记录：在启动过程中，体现为锁定资源；在运行过程中，体现为已使用资源；在被结束之后，该资源记录随之被删除。 "),n("img",{src:"/assets/rm-04.2385c2db.png",alt:"04"})])],-1),n("h3",null,"资源的类型与格式",-1),n("p",null,[n("img",{src:"/assets/rm-05.347294cd.png",alt:"05"}),r(" 如上图所示，所有的资源类均实现一个顶层的Resource接口，该接口定义了所有资源类均需要支持的计算和比较的方法，并进行相应的数学运算符的重载，使得资源之间能够像数字一样直接被计算和比较。")],-1),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"运算符"),n("th",null,"对应方法"),n("th",null,"运算符"),n("th",null,"对应方法")])]),n("tbody",null,[n("tr",null,[n("td",null,"+"),n("td",null,"add"),n("td",null,">"),n("td",null,"moreThan")]),n("tr",null,[n("td",null,"-"),n("td",null,"minus"),n("td",null,"<"),n("td",null,"lessThan")]),n("tr",null,[n("td",null,"*"),n("td",null,"multiply"),n("td",null,"="),n("td",null,"equals")]),n("tr",null,[n("td",null,"/"),n("td",null,"divide"),n("td",null,">="),n("td",null,"notLessThan")]),n("tr",null,[n("td",null,"<="),n("td",null,"notMoreThan"),n("td"),n("td")])])],-1),n("p",null,"当前支持的资源类型如下表所示，所有的资源都有对应的json序列化与反序列化方法，能够通过json格式进行存储和在网络间传递：",-1),n("table",null,[n("thead",null,[n("tr",null,[n("th",null,"资源类型"),n("th",null,"描述")])]),n("tbody",null,[n("tr",null,[n("td",null,"MemoryResource"),n("td",null,"内存资源")]),n("tr",null,[n("td",null,"CPUResource"),n("td",null,"CPU资源")]),n("tr",null,[n("td",null,"LoadResource"),n("td",null,"同时具备内存与CPU的资源")]),n("tr",null,[n("td",null,"YarnResource"),n("td",null,"Yarn队列资源（队列，队列内存，队列CPU，队列实例数）")]),n("tr",null,[n("td",null,"LoadInstanceResource"),n("td",null,"服务器资源（内存，CPU，实例数）")]),n("tr",null,[n("td",null,"DriverAndYarnResource"),n("td",null,"驱动器与执行器资源（同时具备服务器资源，Yarn队列资源）")]),n("tr",null,[n("td",null,"SpecialResource"),n("td",null,"其它自定义资源")])])],-1),n("h3",null,"可用资源管理",-1),n("p",null,[r("RM中的可用资源，主要有两个来源：ECM上报的可用资源，以及Configuration模块中根据标签配置的资源限制。"),n("br"),n("strong",null,"ECM资源上报"),r("：")],-1),n("ol",null,[n("li",null,[n("p",null,"ECM启动时，会广播ECM注册的消息，RM接收到消息后，根据消息中包含的内容进行资源注册，资源相关的内容包括："),n("ol",null,[n("li",null,[n("p",null,"总资源：该ECM能够提供的资源总数。")]),n("li",null,[n("p",null,"保护资源：当剩余资源小于该资源时，不再允许继续分配资源。")]),n("li",null,[n("p",null,"资源类型：如LoadResource，DriverAndYarnResource等类型名称。")]),n("li",null,[n("p",null,"实例信息：机器名加端口名。")])])]),n("li",null,[n("p",null,"RM在收到资源注册请求后，在资源表中新增一条记录，内容与接口的参数信息一致，并通过实例信息找到代表该ECM的标签，在资源、标签关联表中新增一条关联记录。")]),n("li",null,[n("p",null,"ECM在关闭时，会广播ECM关闭的消息，RM接收到消息后，根据消息中的ECM实例信息来进行资源的下线，即删除该ECM实例标签对应的资源和关联记录。")])],-1),n("p",null,[n("strong",null,"Configuration模块标签资源配置"),r("：")],-1),n("p",null,"用户能够在Configuration模块中，根据不同的标签组合进行资源数量限制的配置，如限制User/Creator/EngineType组合的最大可用资源。",-1),n("p",null,"RM通过RPC消息，以组合标签为查询条件，向Configuration模块查询资源信息，并转换成Resource对象参与后续的比较和记录。",-1),n("h3",null,"资源使用管理",-1),n("p",null,[n("strong",null,"接收用户的资源申请。")],-1),n("ol",null,[n("li",null,"LinkisManager在收到启动EngineConn的请求时，会调用RM的资源申请接口，进行资源申请。资源申请接口接受一个可选的时间参数，当申请资源的等待时间超出该时间参数的限制时，该资源申请将自动作为失败处理。")],-1),n("p",null,[n("strong",null,"判断是否有足够的资源")],-1),n("p",null,"即为判断剩余可用资源是否大于申请资源，如果大于或等于，则资源充足；否则资源不充足。",-1),n("ol",null,[n("li",null,[n("p",null,"RM预处理资源申请中附带的标签信息，根据规则将原始的标签进行过滤、组合和转换等操作（如将User/Creator标签和EngineType标签进行组合），这使得后续的资源判断的粒度更加灵活多变。")]),n("li",null,[n("p",null,"在每个转换后的标签上逐一加锁，使得它们所对应的资源记录在资源申请的处理期间保持不变。")]),n("li",null,[n("p",null,"根据每个标签："),n("ol",null,[n("li",null,[n("p",null,"通过Persistence模块从数据库中查询对应的资源记录，如果该记录包含剩余可用资源，则直接用来比较。")]),n("li",null,[n("p",null,"如果没有直接的剩余可用资源记录，则通过[剩余可用资源=最大可用资源-已用资源-已锁定资源-保护资源]公式进行计算得出。")]),n("li",null,[n("p",null,"如果没有最大可用资源记录，则请求Configuration模块，看是否有配置的资源信息，如果有则使用到公式中进行计算，如果没有则跳过针对这个标签的资源判断。")]),n("li",null,[n("p",null,"如果没有任何资源记录，则跳过针对这个标签的资源判断。")])])]),n("li",null,[n("p",null,"只要有一个标签被判断为资源不充足，则资源申请失败，对每个标签逐一解锁。")]),n("li",null,[n("p",null,"只有所有标签都判断为资源充足的情况下，才成功通过资源申请，进入下一步。")])],-1),n("p",null,[n("strong",null,"锁定申请通过的资源")],-1),n("ol",null,[n("li",null,[n("p",null,"根据申请通过的资源数量，在资源表中生成一条新的记录，并与每个标签进行关联。")]),n("li",null,[n("p",null,"如果对应的标签有剩余可用资源记录，则扣减对应的数量。")]),n("li",null,[n("p",null,"生成一个定时任务，在一定时间后检查这批锁定的资源是否被实际使用，如果超时未使用，则强制回收。")]),n("li",null,[n("p",null,"对每个标签进行解锁。")])],-1),n("p",null,[n("strong",null,"上报实际使用资源")],-1),n("ol",null,[n("li",null,[n("p",null,"EngineConn启动后，广播资源使用消息。RM收到消息后，检查该EngineConn对应的标签是否有锁定资源记录，如果没有，则报错。")]),n("li",null,[n("p",null,"如果有锁定资源，则对该EngineConn有关联的所有标签进行加锁。")]),n("li",null,[n("p",null,"对每个标签，将对应的锁定资源记录转换为已使用资源记录。")]),n("li",null,[n("p",null,"解锁所有标签。")])],-1),n("p",null,[n("strong",null,"释放实际使用资源")],-1),n("ol",null,[n("li",null,[n("p",null,"EngineConn结束生命周期后，广播资源回收消息。RM收到消息后，检查该EngineConn对应的标签是否有已使用资源记录。")]),n("li",null,[n("p",null,"如果有，则对该EngineConn有关联的所有标签进行加锁。")]),n("li",null,[n("p",null,"对每个标签，在已使用资源记录中减去对应的数量。")]),n("li",null,[n("p",null,"如果对应的标签有剩余可用资源记录，则增加对应的数量。")]),n("li",null,[n("p",null,"对每个标签解锁")])],-1),n("h3",null,"外部资源管理",-1),n("p",null,"在RM中，为了更加灵活并有拓展性对资源进行分类，支持多集群的资源管控的同时，使得接入新的外部资源更加便利，在设计上进行了以下几点的考虑：",-1),n("ol",null,[n("li",null,[n("p",null,"通过标签来对资源进行统一管理。资源注册后，与标签进行关联，使得资源的属性能够无限拓展。同时，资源申请也都带上标签，实现灵活的匹配。")]),n("li",null,[n("p",null,"将集群抽象成一个或多个标签，并在外部资源管理模块中维护每个集群标签对应的环境信息，实现动态的对接。")]),n("li",null,[n("p",null,[r("抽象出通用的外部资源管理模块，如需接入新的外部资源类型，只要实现固定的接口，即可将不同类型的资源信息转换为RM中的Resource实体，实现统一管理。 "),n("img",{src:"/assets/rm-06.dde9d64d.png",alt:"06"}),r(" RM的其它模块，通过ExternalResourceService提供的接口来进行外部资源信息的获取。")])])],-1),n("p",null,"而ExternalResourceService通过资源类型和标签来获取外部资源的信息：",-1),n("ol",null,[n("li",null,[n("p",null,"所有外部资源的类型、标签、配置等属性（如集群名称、Yarn的web url、Hadoop版本等信息），都维护在linkis_external_resource_provider表中。")]),n("li",null,[n("p",null,"针对每种资源类型，均有一个ExternalResourceProviderParser接口的实现，将外部资源的属性进行解析，将能够匹配到Label的信息转换成对应的Label，将能够作为参数去请求资源接口的都转换成params。最后构建成一个能够作为外部资源信息查询依据的ExternalResourceProvider实例。")]),n("li",null,[n("p",null,"根据ExternalResourceService方法的参数中的资源类型和标签信息，找到匹配的ExternalResourceProvider，根据其中的信息生成ExternalResourceRequest，正式调用外部资源提供的API，发起资源信息请求。")])],-1)],g={setup:(n,{expose:r})=>(r({frontmatter:{}}),(n,r)=>(e(),l("div",h,p)))},m={setup(l){const n=t(localStorage.getItem("locale")||"en");return(l,r)=>"en"===n.value?(e(),o(a(d),{key:0})):(e(),o(a(g),{key:1}))}};export{m as default};
