import{o as i,c as e,m as n,r as s,l as r,u as o}from"./vendor.1180558b.js";const t={class:"markdown-body"},l=[n("<h1>Installation directory structure</h1><p>The directory structure of Linkis1.0 is very different from the 0.X version. Each microservice in 0.X has a root directory that exists independently. The main advantage of this directory structure is that it is easy to distinguish microservices and facilitate individual Microservices are managed, but there are some obvious problems:</p><ol><li>The microservice catalog is too complicated and it is not convenient to switch catalog management</li><li>There is no unified startup script, which makes it more troublesome to start and stop microservices</li><li>There are a large number of duplicate service configurations, and the same configuration often needs to be modified in many places</li><li>There are a large number of repeated Lib dependencies, which increases the size of the installation package and the risk of dependency conflicts</li></ol><p>Therefore, in Linkis 1.0, we have greatly optimized and adjusted the installation directory structure, reducing the number of microservice directories, reducing the jar packages that are repeatedly dependent, and reusing configuration files and microservice management scripts as much as possible. Mainly reflected in the following aspects:</p><p>1.The bin folder is no longer provided for each microservice, and modified to be shared by all microservices.</p><blockquote><p>The Bin folder is modified to the installation directory, which is mainly used to install Linkis1.0 and check the environment status. The new sbin directory provides one-click start and stop for Linkis, and provides independent start and stop for all microservices by changing parameters.</p></blockquote><p>2.No longer provide a separate conf directory for each microservice, and modify it to be shared by all microservices.</p><blockquote><p>The Conf folder contains two aspects of content. On the one hand, it is the configuration information shared by all microservices. This type of configuration information contains information that users can customize configuration according to their own environment; on the other hand, it is the special characteristics of each microservice. Configuration, under normal circumstances, users do not need to change by themselves.</p></blockquote><p>3.The lib folder is no longer provided for each microservice, and modified to be shared by all microservices</p><blockquote><p>The Lib folder also contains two aspects of content, on the one hand, the common dependencies required by all microservices; on the other hand, the special dependencies required by each microservice.</p></blockquote><p>4.The log directory is no longer provided for each microservice, modified to be shared by all microservices</p><blockquote><p>The Log directory contains log files of all microservices.</p></blockquote><p>The simplified directory structure of Linkis1.0 is as follows.</p><pre><code>├── bin ──installation directory\n│ ├── checkEnv.sh ── Environmental variable detection\n│ ├── checkServices.sh ── Microservice status check\n│ ├── common.sh ── Some public shell functions\n│ ├── install-io.sh ── Used for dependency replacement during installation\n│ └── install.sh ── Main script of Linkis installation\n├── conf ──configuration directory\n│ ├── application-eureka.yml \n│ ├── application-linkis.yml    ──Microservice general yml\n│ ├── linkis-cg-engineconnmanager-io.properties\n│ ├── linkis-cg-engineconnmanager.properties\n│ ├── linkis-cg-engineplugin.properties\n│ ├── linkis-cg-entrance.properties\n│ ├── linkis-cg-linkismanager.properties\n│ ├── linkis-computation-governance\n│ │   └── linkis-client\n│ │       └── linkis-cli\n│ │           ├── linkis-cli.properties\n│ │           └── log4j2.xml\n│ ├── linkis-env.sh   ──linkis environment properties\n│ ├── linkis-et-validator.properties\n│ ├── linkis-mg-gateway.properties\n│ ├── linkis.properties  ──linkis global properties\n│ ├── linkis-ps-bml.properties\n│ ├── linkis-ps-cs.properties\n│ ├── linkis-ps-datasource.properties\n│ ├── linkis-ps-publicservice.properties\n│ ├── log4j2.xml\n│ ├── proxy.properties(Optional)\n│ └── token.properties(Optional)\n├── db ──database DML and DDL file directory\n│ ├── linkis\\_ddl.sql ──Database table definition SQL\n│ ├── linkis\\_dml.sql ──Database table initialization SQL\n│ └── module ──Contains DML and DDL files of each microservice\n├── lib ──lib directory\n│ ├── linkis-commons ──Common dependency package\n│ ├── linkis-computation-governance ──The lib directory of the computing governance module\n│ ├── linkis-engineconn-plugins ──lib directory of all EngineConnPlugins\n│ ├── linkis-public-enhancements ──lib directory of public enhancement services\n│ └── linkis-spring-cloud-services ──SpringCloud lib directory\n├── logs ──log directory\n│ ├── linkis-cg-engineconnmanager-gc.log\n│ ├── linkis-cg-engineconnmanager.log\n│ ├── linkis-cg-engineconnmanager.out\n│ ├── linkis-cg-engineplugin-gc.log\n│ ├── linkis-cg-engineplugin.log\n│ ├── linkis-cg-engineplugin.out\n│ ├── linkis-cg-entrance-gc.log\n│ ├── linkis-cg-entrance.log\n│ ├── linkis-cg-entrance.out\n│ ├── linkis-cg-linkismanager-gc.log\n│ ├── linkis-cg-linkismanager.log\n│ ├── linkis-cg-linkismanager.out\n│ ├── linkis-et-validator-gc.log\n│ ├── linkis-et-validator.log\n│ ├── linkis-et-validator.out\n│ ├── linkis-mg-eureka-gc.log\n│ ├── linkis-mg-eureka.log\n│ ├── linkis-mg-eureka.out\n│ ├── linkis-mg-gateway-gc.log\n│ ├── linkis-mg-gateway.log\n│ ├── linkis-mg-gateway.out\n│ ├── linkis-ps-bml-gc.log\n│ ├── linkis-ps-bml.log\n│ ├── linkis-ps-bml.out\n│ ├── linkis-ps-cs-gc.log\n│ ├── linkis-ps-cs.log\n│ ├── linkis-ps-cs.out\n│ ├── linkis-ps-datasource-gc.log\n│ ├── linkis-ps-datasource.log\n│ ├── linkis-ps-datasource.out\n│ ├── linkis-ps-publicservice-gc.log\n│ ├── linkis-ps-publicservice.log\n│ └── linkis-ps-publicservice.out\n├── pid ──Process ID of all microservices\n│ ├── linkis\\_cg-engineconnmanager.pid ──EngineConnManager microservice\n│ ├── linkis\\_cg-engineconnplugin.pid ──EngineConnPlugin microservice\n│ ├── linkis\\_cg-entrance.pid ──Engine entrance microservice\n│ ├── linkis\\_cg-linkismanager.pid ──linkis manager microservice\n│ ├── linkis\\_mg-eureka.pid ──eureka microservice\n│ ├── linkis\\_mg-gateway.pid ──gateway microservice\n│ ├── linkis\\_ps-bml.pid ──material library microservice\n│ ├── linkis\\_ps-cs.pid ──Context microservice\n│ ├── linkis\\_ps-datasource.pid ──Data source microservice\n│ └── linkis\\_ps-publicservice.pid ──public microservice\n└── sbin ──microservice start and stop script directory\n    ├── ext ──Start and stop script directory of each microservice\n    ├── linkis-daemon.sh ── Quick start and stop, restart a single microservice script\n    ├── linkis-start-all.sh ── Start all microservice scripts with one click\n    └── linkis-stop-all.sh ── Stop all microservice scripts with one click\n</code></pre><h1>Configuration item modification</h1><p>After executing the install.sh in the bin directory to complete the Linkis installation, you need to modify the configuration items. All configuration items are located in the con directory. Normally, you need to modify the three configurations of db.sh, linkis.properties, and linkis-env.sh For documentation, project installation and configuration, please refer to the article “Linkis1.0 Installation”</p><h1>Microservice start and stop</h1><p>After modifying the configuration items, you can start the microservice in the sbin directory. The names of all microservices are as follows:</p><pre><code>├── linkis-cg-engineconnmanager  ──engine management service\n├── linkis-cg-engineplugin  ──EngineConnPlugin management service\n├── linkis-cg-entrance  ──computing governance entrance service\n├── linkis-cg-linkismanager  ──computing governance management service\n├── linkis-mg-eureka  ──microservice registry service\n├── linkis-mg-gateway  ──Linkis gateway service\n├── linkis-ps-bml  ──material library service\n├── linkis-ps-cs  ──context service\n├── linkis-ps-datasource  ──data source service\n└── linkis-ps-publicservice  ──public service\n</code></pre><p><strong>Microservice abbreviation</strong>:</p><table><thead><tr><th>Abbreviation</th><th>Full English Name</th><th>Full Chinese Name</th></tr></thead><tbody><tr><td>cg</td><td>Computation Governance</td><td>Computing Governance</td></tr><tr><td>mg</td><td>Microservice Covernance</td><td>Microservice Governance</td></tr><tr><td>ps</td><td>Public Enhancement Service</td><td>Public Enhancement Service</td></tr></tbody></table><p>In the past, to start and stop a single microservice, you need to enter the bin directory of each microservice and execute the start/stop script. When there are many microservices, it is troublesome to start and stop. A lot of additional directory switching operations are added. Linkis1.0 will all The scripts related to the start and stop of microservices are placed in the sbin directory, and only a single entry script needs to be executed.</p><p><strong>Under the Linkis/sbin directory</strong>:</p><p>1.Start all microservices at once:</p><pre><code>sh linkis-start-all.sh\n</code></pre><p>2.Shut down all microservices at once</p><pre><code>sh linkis-stop-all.sh\n</code></pre><p>3.Start a single microservice (the service name needs to be removed from the linkis prefix, such as mg-eureka)</p><pre><code>sh linkis-daemon.sh start service-name\n</code></pre><p>For example:</p><pre><code>sh linkis-daemon.sh start mg-eureka\n</code></pre><p>4.Shut down a single microservice</p><pre><code>sh linkis-daemon.sh stop service-name\n</code></pre><p>For example:</p><pre><code>sh linkis-daemon.sh stop mg-eureka\n</code></pre><p>5.Restart a single microservice</p><pre><code>sh linkis-daemon.sh restart service-name\n</code></pre><p>For example:</p><pre><code>sh linkis-daemon.sh restart mg-eureka\n</code></pre><p>6.View the status of a single microservice</p><pre><code>sh linkis-daemon.sh status service-name\n</code></pre><p>For example:</p><pre><code>sh linkis-daemon.sh status mg-eureka\n</code></pre>",43)],a={setup:(n,{expose:s})=>(s({frontmatter:{}}),(n,s)=>(i(),e("div",t,l)))},c={class:"markdown-body"},p=[n("<h1>安装目录结构</h1><p>Linkis1.0的目录结构与0.X版本相差巨大，0.X的每个微服务都时独立存在的一个根目录，这种目录结构带来的主要的好处是易于区分微服务，便于单个的微服务进行管理，但也存在着一些很明显的问题：</p><ol><li><p>微服务目录过于繁杂，切换目录管理不够方便</p></li><li><p>没有统一的启动脚本，导致微服务启停比较麻烦</p></li><li><p>存在大量重复的服务配置，同一个配置经常需要修改多处</p></li><li><p>存在大量重复的Lib依赖，增大了安装包的体积和依赖冲突的风险</p></li></ol><p>因此Linkis1.0中，我们对安装目录结构做了极大程度的优化和调整，减少了微服务目录的数量，降低了重复依赖的jar包，尽可能复用了配置文件和微服务管理脚本，主要体现在以下几个方面：</p><p>一、 不再为每个微服务提供bin文件夹，修改为所有微服务共用。</p><blockquote><p>Bin文件夹修改为安装目录，主要用于安装Linkis1.0和检查环境状态，新增sbin目录，为Linkis提供一键启停，依靠变更参数的方式为所有微服务提供单独启停。</p></blockquote><p>二、 不再为每个微服务单独提供conf目录，修改为所有微服务共用。</p><blockquote><p>Conf文件夹包含两个方面的内容，一方面是所有微服务共用的配置信息，这类配置信息里面包含了用户根据自身环境自定义配置的信息；另一方面是各个微服务的各自的特殊配置，一般情况下用户不需要自行更改。</p></blockquote><p>三、 不再为每个微服务提供lib文件夹，修改为所有微服务共用</p><blockquote><p>Lib文件夹中同样包含了两个方面的内容，一方面是所有微服务都需要的公共依赖；另一方面是各个微服务各自需要的特殊依赖。</p></blockquote><p>四、 不再为每个微服务提供log目录，修改为所有微服务共用</p><blockquote><p>Log目录中包含了所有微服务的日志文件。</p></blockquote><p>Linkis1.0简化后的目录结构如下，其中加深标注的文件，为用户安装使用时必定会使用的目录项，其他目录项初次使用无特殊情况无需关心：</p><p>├── bin 安装目录<br> │   ├── checkEnv.sh ── 环境变量检测<br> │   ├── checkServices.sh ── 微服务状态检测<br> │   ├── common.sh ── 部分公共shell函数<br> │   ├── install-io.sh ── 用于安装时的依赖替换<br> │   └── <strong>install.sh</strong> ── <strong>Linkis安装的主脚本</strong><br> ├── conf 配置目录<br> │   ├── application-eureka.yml<br> │   ├── application-linkis.yml ──微服务通用yml<br> │   ├── linkis-cg-engineconnmanager-io.properties<br> │   ├── linkis-cg-engineconnmanager.properties<br> │   ├── linkis-cg-engineplugin.properties<br> │   ├── linkis-cg-entrance.properties<br> │   ├── linkis-cg-linkismanager.properties<br> │   ├── linkis-computation-governance<br> │   │   └── linkis-client<br> │   │   └── linkis-cli<br> │   │   ├── linkis-cli.properties<br> │   │   └── log4j2.xml<br> │   ├── linkis-env.sh ──linkis environment properties<br> │   ├── linkis-et-validator.properties<br> │   ├── linkis-mg-gateway.properties<br> │   ├── linkis.properties ──linkis global properties<br> │   ├── linkis-ps-bml.properties<br> │   ├── linkis-ps-cs.properties<br> │   ├── linkis-ps-datasource.properties<br> │   ├── linkis-ps-publicservice.properties<br> │   ├── log4j2.xml<br> │   ├── proxy.properties(可选)<br> │   └── token.properties(可选)<br> ├── db 数据库DML和DDL文件目录<br> │   ├── linkis_ddl.sql ──数据库表定义SQL<br> │   ├── linkis_dml.sql ──数据库表初始化SQL<br> │   └── module ──包含各个微服务的DML和DDL文件<br> ├── lib lib目录<br> │   ├── linkis-commons ──公共依赖包<br> │   ├── linkis-computation-governance ──计算治理模块的lib目录<br> │   ├── linkis-engineconn-plugins ──所有引擎插件的lib目录<br> │   ├── linkis-public-enhancements ──公共增强服务的lib目录<br> │   └── linkis-spring-cloud-services ──SpringCloud的lib目录<br> ├── logs 日志目录<br> │   ├── linkis-cg-engineconnmanager-gc.log<br> │   ├── linkis-cg-engineconnmanager.log<br> │   ├── linkis-cg-engineconnmanager.out<br> │   ├── linkis-cg-engineplugin-gc.log<br> │   ├── linkis-cg-engineplugin.log<br> │   ├── linkis-cg-engineplugin.out<br> │   ├── linkis-cg-entrance-gc.log<br> │   ├── linkis-cg-entrance.log<br> │   ├── linkis-cg-entrance.out<br> │   ├── linkis-cg-linkismanager-gc.log<br> │   ├── linkis-cg-linkismanager.log<br> │   ├── linkis-cg-linkismanager.out<br> │   ├── linkis-et-validator-gc.log<br> │   ├── linkis-et-validator.log<br> │   ├── linkis-et-validator.out<br> │   ├── linkis-mg-eureka-gc.log<br> │   ├── linkis-mg-eureka.log<br> │   ├── linkis-mg-eureka.out<br> │   ├── linkis-mg-gateway-gc.log<br> │   ├── linkis-mg-gateway.log<br> │   ├── linkis-mg-gateway.out<br> │   ├── linkis-ps-bml-gc.log<br> │   ├── linkis-ps-bml.log<br> │   ├── linkis-ps-bml.out<br> │   ├── linkis-ps-cs-gc.log<br> │   ├── linkis-ps-cs.log<br> │   ├── linkis-ps-cs.out<br> │   ├── linkis-ps-datasource-gc.log<br> │   ├── linkis-ps-datasource.log<br> │   ├── linkis-ps-datasource.out<br> │   ├── linkis-ps-publicservice-gc.log<br> │   ├── linkis-ps-publicservice.log<br> │   └── linkis-ps-publicservice.out<br> ├── pid 所有微服务的进程ID<br> │   ├── linkis_cg-engineconnmanager.pid ──引擎管理器微服务<br> │   ├── linkis_cg-engineconnplugin.pid ──引擎插件微服务<br> │   ├── linkis_cg-entrance.pid ──引擎入口微服务<br> │   ├── linkis_cg-linkismanager.pid ──linkis管理器微服务<br> │   ├── linkis_mg-eureka.pid ──eureka微服务<br> │   ├── linkis_mg-gateway.pid ──gateway微服务<br> │   ├── linkis_ps-bml.pid ──物料库微服务<br> │   ├── linkis_ps-cs.pid ──上下文微服务<br> │   ├── linkis_ps-datasource.pid ──数据源微服务<br> │   └── linkis_ps-publicservice.pid ──公共微服务<br> └── sbin 微服务启停脚本目录<br>      ├── ext ──各个微服务的启停脚本目录<br>      ├── <strong>linkis-daemon.sh</strong> ── <strong>快捷启停、重启单个微服务脚本</strong><br>     ├── <strong>linkis-start-all.sh</strong> ── <strong>一键启动全部微服务脚本</strong><br>    └── <strong>linkis-stop-all.sh</strong> ── <strong>一键停止全部微服务脚本</strong></p><h1>配置项修改</h1><p>在执行完bin目录下的install.sh完成Linkis安装后，需要进行配置项修改，所有配置项位于con目录下，通常情况下需要修改db.sh、linkis.properties、linkis-env.sh三个配置文件，项目安装和配置可以参考文章《Linkis1.0安装》</p><h1>微服务启停</h1><p>修改完配置项之后即可在sbin目录下启动微服务，所有微服务名称如下：</p><p>├── linkis-cg-engineconnmanager 引擎管理服务<br> ├── linkis-cg-engineplugin 引擎插件管理服务<br> ├── linkis-cg-entrance 计算治理入口服务<br> ├── linkis-cg-linkismanager 计算治理管理服务<br> ├── linkis-mg-eureka 微服务注册中心服务<br> ├── linkis-mg-gateway Linkis网关服务<br> ├── linkis-ps-bml 物料库服务<br> ├── linkis-ps-cs 上下文服务<br> ├── linkis-ps-datasource 数据源服务<br> └── linkis-ps-publicservice 公共服务</p><p><strong>微服务简称</strong>：</p><table><thead><tr><th>简称</th><th>英文全称</th><th>中文全称</th></tr></thead><tbody><tr><td>cg</td><td>Computation Governance</td><td>计算治理</td></tr><tr><td>mg</td><td>Microservice Covernance</td><td>微服务治理</td></tr><tr><td>ps</td><td>Public Enhancement Service</td><td>公共增强服务</td></tr></tbody></table><p>以往启停单个微服务需要进入到各个微服务的bin目录下，执行start/stop脚本，在微服务较多的情况下启停比较麻烦，增加了很多额外的切换目录操作，Linkis1.0将所有的微服务启停相关的脚本放置在了sbin目录下，只需要执行单个入口脚本即可。</p><p><strong>在Linkis/sbin目录下</strong>：</p><ol><li><p>一次性启动所有微服务：</p><p>sh linkis-start-all.sh</p></li><li><p>一次性关停所有微服务</p><p>sh linkis-stop-all.sh</p></li><li><p>启动单个微服务（服务名需要去掉linkis前缀如：mg-eureka）</p><p>sh linkis-daemon.sh start service-name</p><p>例如: sh linkis-daemon.sh start mg-eureka</p></li><li><p>关闭单个微服务</p><p>sh linkis-daemon.sh stop service-name</p><p>例如: sh linkis-daemon.sh stop mg-eureka</p></li><li><p>重启单个微服务</p><p>sh linkis-daemon.sh restart service-name</p><p>例如: sh linkis-daemon.sh restart mg-eureka</p></li><li><p>查看单个微服务的状态</p><p>sh linkis-daemon.sh status service-name</p><p>例如: sh linkis-daemon.sh status mg-eureka</p></li></ol>",24)],g={setup:(n,{expose:s})=>(s({frontmatter:{}}),(n,s)=>(i(),e("div",c,p)))},d={setup(e){const n=s(localStorage.getItem("locale")||"en");return(e,s)=>"en"===n.value?(i(),r(o(a),{key:0})):(i(),r(o(g),{key:1}))}};export{d as default};
